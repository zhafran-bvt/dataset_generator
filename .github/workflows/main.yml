name: Generate Dataset

on:
  workflow_dispatch:
    inputs:
      format_choice:
        description: 'Choose format: 1 for WKT, 2 for GeoJSON'
        required: true
        default: '1'
      include_demographic:
        description: 'Include demographic columns (Gender, Occupation, Education Level)? (yes/no)'
        required: true
        default: 'no'
      include_economic:
        description: 'Include economic columns (Household Income, Employment Status, Access to Healthcare)? (yes/no)'
        required: true
        default: 'no'
      num_columns:
        description: 'Enter number of columns (min 3, max 29 depending on demographic/economic choices)'
        required: true
        default: '9'
      use_spatial_clustering:
        description: 'Use spatial clustering to create realistic population distributions? (yes/no)'
        required: true
        default: 'no'
      area_choice:
        description: 'Choose area: 1 for Jakarta, 2 for Yogyakarta, 3 for Indonesia, 4 for Japan, 5 for Vietnam'
        required: true
        default: '3'
      geojson_path:
        description: 'Enter path to GeoJSON file for land boundaries (e.g., geojson/id-jk.min.geojson for Jakarta, geojson/id.json for Indonesia)'
        required: false
        default: ''
      num_rows:
        description: 'Enter number of rows'
        required: true
        default: '10'
      geometry_type:
        description: 'Choose geometry type: 1 for POINT, 2 for POLYGON, 3 for MULTIPOLYGON'
        required: true
        default: '1'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install pandas geopandas shapely openpyxl tqdm numpy scipy

      - name: Run unit tests
        run: |
          python -m unittest test_file_generator.py -v

      - name: Prepare inputs and run script
        run: |
          # Initialize empty input file
          echo -n "" > inputs.txt

          # Write inputs in the exact order expected by file_generator.py
          echo "${{ inputs.format_choice }}" >> inputs.txt
          echo "${{ inputs.include_demographic }}" >> inputs.txt
          echo "${{ inputs.include_economic }}" >> inputs.txt
          # Calculate minimum columns
          min_cols=3
          if [ "${{ inputs.include_demographic }}" = "yes" ]; then
            min_cols=$((min_cols + 3))
          fi
          if [ "${{ inputs.include_economic }}" = "yes" ]; then
            min_cols=$((min_cols + 3))
          fi
          # Validate num_columns
          if [ "${{ inputs.num_columns }}" -lt "$min_cols" ]; then
            echo "Error: num_columns must be at least $min_cols" >&2
            exit 1
          fi
          echo "${{ inputs.num_columns }}" >> inputs.txt
          echo "${{ inputs.use_spatial_clustering }}" >> inputs.txt
          echo "${{ inputs.area_choice }}" >> inputs.txt
          # Handle GeoJSON path for areas 1, 3, 4, 5
          if [ "${{ inputs.area_choice }}" = "1" ] || [ "${{ inputs.area_choice }}" = "3" ] || [ "${{ inputs.area_choice }}" = "4" ] || [ "${{ inputs.area_choice }}" = "5" ]; then
            echo "${{ inputs.geojson_path }}" >> inputs.txt
            if [ -z "${{ inputs.geojson_path }}" ]; then
              echo "Error: geojson_path is required for this area" >&2
              exit 1
            fi
          fi
          echo "${{ inputs.num_rows }}" >> inputs.txt
          echo "${{ inputs.geometry_type }}" >> inputs.txt

          # Debug: Display the input sequence
          echo "Input sequence:"
          cat inputs.txt

          # Run the script with the prepared inputs
          python3 file_generator.py < inputs.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: datasets
          path: |
            output/*.csv
            output/*.xlsx
